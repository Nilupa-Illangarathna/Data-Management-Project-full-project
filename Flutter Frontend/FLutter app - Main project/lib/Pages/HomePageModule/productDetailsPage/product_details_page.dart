import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:main_app/Widgets/home_module/atomic_widgets/text_passage.dart';
import '/Classes/responsiveness/responsiveness.dart';
import '/Classes/text_related/text_truncator.dart';
import '/Pages/HomePageModule/ShopDetailsPage/shop_details_page.dart';
import '/API_Classes/HomeModuleRelated/cartData/cartClass.dart';
import '/Pages/HomePageModule/homePageScreen/home_screen.dart';
import '/API_Classes/HomeModuleRelated/homepageData/hotel_related_card_data.dart';
import '/Pages/HomePageModule/home_controller.dart';
import '/API_Classes/HomeModuleRelated/placeData/place_data_init.dart';
import '/stateManagement/changeNotifiers/homePageModule/cart_data_notifier.dart';
import '/stateManagement/changeNotifiers/homePageModule/hotel_related_card_data_notifier.dart';
import '/stateManagement/changeNotifiers/homePageModule/shop_items_data_notifier.dart';
import '/Widgets/common/common_blue_themed_submit_button.dart';
import '/Widgets/common/common_text_form_field.dart';
import '/Widgets/home_module/atomic_widgets/custom_passage.dart';
import '/Widgets/home_module/atomic_widgets/quentity_selector.dart';
import '/Widgets/home_module/molecule_widgets/addon_listview.dart';
import '/Widgets/home_module/molecule_widgets/product_header.dart';
import 'package:provider/provider.dart';
import '/API_Classes/HomeModuleRelated/cartData/cartData.dart';

class ProductDetailsPage extends StatefulWidget {
  final HotelData hotelData;
  final FoodItem product;

  ProductDetailsPage({required this.hotelData, required this.product});

  @override
  _ProductDetailsPageState createState() => _ProductDetailsPageState();
}

class _ProductDetailsPageState extends State<ProductDetailsPage> {
  ThemeData get theme => Theme.of(context);
  bool isDarkTheme = false;
  late Color containerColor;

  // TODO CreateUser Api start
  late FoodItem productInstance;
  late var placeID;
  late var foodID;
  // TODO CreateUser Api end

  var isLoading = true;

  @override
  void initState() {
    placeID = widget.product.placeID;
    foodID = widget.product.foodID;
    final InsideShopDataProvider =
        Provider.of<InsideShopDataNotifier>(context, listen: false);
    productInstance = InsideShopDataProvider.getFoodItemByIDs(placeID, foodID);
  }

  @override
  void dispose() {
    super.dispose();
    // productInstance.resetAddonIsAdded();
  }

  TextEditingController AdditionalComments = TextEditingController();
  double totalAddonsPrice =
      0.0; // Step 1: Class-level variable to hold total addons price
  int selectedQuantity = 1;
  double totalAmount = 0;

  // Step 2: Function to update the total addons price
  void updateTotalAddonsPrice(double price) {
    setState(() {
      totalAddonsPrice += price;
      totalAmount =
          (widget.product.price + totalAddonsPrice) * selectedQuantity;
    });
  }

  // Function to update the selected quantity
  int updateSelectedQuantity(int quantity) {
    setState(() {
      selectedQuantity = quantity;
      totalAmount =
          (widget.product.price + totalAddonsPrice) * selectedQuantity;
    });
    return selectedQuantity;
  }

  void _submitForm() {
    totalAmount = (widget.product.price + totalAddonsPrice) *
        selectedQuantity; //TODO required
    productInstance.printFoodItemDetails(); //remove
    final HotelData hotelDetails = widget.hotelData;
    final FoodItem productDetails = productInstance;

    // TODO this is there pdata is passed to cart
    Cart cartInstance = Cart(
        orderID: 'ORDER_001', //TODO this should represdent the orderID
        numberOfItems: selectedQuantity,
        cartID: Cart.generateUniqueCartID(), //TODO N.B. cartID is autogenerated
        hotelDetails: hotelDetails,
        productDetails: productDetails,
        totalAmount: totalAmount,
        addonsSet: productInstance.extraAddons /////EDITED
        );

    dummyCartArray.add(cartInstance); //TODO adding to the cart

    final CartProvider = Provider.of<CartDataProvider>(context, listen: false);
    CartProvider.changeNotifier();

    // printCartArray(dummyCartArray);

    Navigator.of(context).pop(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => HomeController(
          index: 0,
        ),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(1.0, 0.0); // Slide from right to left
          const end = Offset.zero;
          var tween = Tween(begin: begin, end: end);
          var offsetAnimation = animation.drive(tween);
          return SlideTransition(position: offsetAnimation, child: child);
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // placeID = widget.product.placeID;
    // foodID = widget.product.foodID;
    // final InsideShopDataProvider =
    //     Provider.of<InsideShopDataNotifier>(context, listen: false);
    // productInstance = InsideShopDataProvider.getFoodItemByIDs(placeID, foodID);
    // print("All the food Item details: ");
    // productInstance.printFoodItemDetails();

    isDarkTheme = theme.brightness == Brightness.dark;
    containerColor = isDarkTheme
        ? Colors.black.withOpacity(0.3)
        : theme.primaryColor.withOpacity(0.15);

    totalAmount = (widget.product.price + totalAddonsPrice) * selectedQuantity;
    return Scaffold(
        backgroundColor: Colors.white,
        body: Container(
          color: containerColor,
          child: ListView(
            children: [
              Padding(
                padding: EdgeInsets.only(
                    left: 16.0 * WR, right: 16.0 * WR, top: 16.0 * HR),
                child: Column(
                  children: [
                    Stack(
                      children: [
                        Column(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Container(
                              height:
                                  MediaQuery.of(context).size.height - 88 * HR,
                              child: SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    TextButton(
                                      onPressed: () {
                                        Navigator.of(context).pop(
                                          PageRouteBuilder(
                                            pageBuilder: (context, animation,
                                                    secondaryAnimation) =>
                                                ShopDetailsPage(
                                              hotelData: widget.hotelData,
                                            ),
                                            transitionsBuilder: (context,
                                                animation,
                                                secondaryAnimation,
                                                child) {
                                              const begin = Offset(1.0,
                                                  0.0); // Slide from right to left
                                              const end = Offset.zero;
                                              var tween =
                                                  Tween(begin: begin, end: end);
                                              var offsetAnimation =
                                                  animation.drive(tween);
                                              return SlideTransition(
                                                  position: offsetAnimation,
                                                  child: child);
                                            },
                                            transitionDuration: const Duration(
                                                milliseconds: 50),
                                          ),
                                        );
                                      },
                                      style: TextButton.styleFrom(
                                        backgroundColor:
                                            Colors.transparent, // No background
                                        padding: EdgeInsets.all(
                                            0), // No extra padding
                                      ),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.start,
                                        children: [
                                          Icon(
                                            Icons.arrow_back_ios,
                                            color: isDarkTheme
                                                ? theme.primaryColor
                                                    .withOpacity(0.3)
                                                : theme.primaryColor
                                                    .withOpacity(0.7),
                                          ),
                                          SizedBox(width: 4.0 * WR),
                                          Text(
                                            "Back",
                                            style: TextStyle(
                                              fontSize: 17.0 * HR,
                                              fontWeight: FontWeight.w400,
                                              letterSpacing: -0.408 * WR,
                                              color: isDarkTheme
                                                  ? theme.primaryColor
                                                      .withOpacity(0.3)
                                                  : theme.primaryColor
                                                      .withOpacity(0.7),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    SizedBox(
                                      height: 1 * HR,
                                    ),
                                    Consumer<HotelDataProvider>(
                                      builder: (context, PlaceProvider, child) {
                                        HotelData item =
                                            PlaceProvider.getPlaceByID(
                                                widget.hotelData.PlaceID);
                                        return Container(
                                          decoration: BoxDecoration(
                                            color: Colors.white,
                                            borderRadius: BorderRadius.all(
                                                Radius.circular(16)),
                                          ),
                                          child: Column(
                                            children: [
                                              Container(
                                                height: 150 * HR,
                                                color: Colors.transparent,
                                                child: ProductHeaderCard(
                                                  placeData: widget.hotelData,
                                                  imagePath:
                                                      productInstance.imagePath,
                                                  price: productInstance.price
                                                      .toString(),
                                                  title: limitTextWithEllipsis(
                                                      productInstance.title,
                                                      14),
                                                  isFavorite: item
                                                      .isFavorite, // Initial favorite state
                                                  onFavoritePressed:
                                                      (bool isFavorite) {
                                                    // Handle favorite button press here

                                                    print(
                                                        'Favorite button pressed. Is favorite: $isFavorite');
                                                    widget.hotelData
                                                        .printHotelDataDetails();
                                                  },
                                                  onNavigationPressed: () {
                                                    // Handle navigation button press here
                                                    print(
                                                        'Navigation button pressed');
                                                  },
                                                ),
                                              ),
                                            ],
                                          ),
                                        );
                                      },
                                    ),
                                    SizedBox(
                                      height: 16 * HR,
                                    ),
                                    Row(
                                      children: [
                                        CustomTextPassage(
                                          text: "Details",
                                          fontWeight: FontWeight.w600,
                                          alignment: TextAlign.left,
                                          fontSize: 20 * HR,
                                          fontColor: isDarkTheme
                                              ? theme.primaryColor
                                                  .withOpacity(0.3)
                                              : theme.primaryColor
                                                  .withOpacity(0.7),
                                        ),
                                      ],
                                    ),
                                    SizedBox(
                                      height: 8 * HR,
                                    ),
                                    Container(
                                      margin: EdgeInsets.all(0),
                                      child: CustomPassage(
                                        text: productInstance.description,
                                        fontColor: isDarkTheme
                                            ? theme.primaryColor
                                                .withOpacity(0.3)
                                            : theme.primaryColor
                                                .withOpacity(0.5),
                                      ),
                                    ),
                                    SizedBox(
                                      height: 24 * HR,
                                    ),
                                    Row(
                                      children: [
                                        CustomTextPassage(
                                          text: "Extra Features",
                                          fontWeight: FontWeight.w600,
                                          alignment: TextAlign.left,
                                          fontSize: 20 * HR,
                                          fontColor: isDarkTheme
                                              ? theme.primaryColor
                                                  .withOpacity(0.3)
                                              : theme.primaryColor
                                                  .withOpacity(0.4),
                                        ),
                                      ],
                                    ),
                                    Row(
                                      children: [
                                        CustomTextPassage(
                                          text: "Options to choose",
                                          fontWeight: FontWeight.w400,
                                          alignment: TextAlign.left,
                                          fontSize: 15 * HR,
                                          fontColor: isDarkTheme
                                              ? theme.primaryColor
                                                  .withOpacity(0.3)
                                              : theme.primaryColor
                                                  .withOpacity(0.4),
                                        ),
                                      ],
                                    ),
                                    SizedBox(
                                      height: 12 * HR,
                                    ),
                                    Container(
                                      height: (52 *
                                                  productInstance
                                                      .extraAddons.length -
                                              0) *
                                          HR,
                                      child:

                                          // AddonListView(
                                          //   addons: productInstance.extraAddons,
                                          //   updateTotalAddonsPrice:
                                          //       updateTotalAddonsPrice, // Pass the function
                                          // ),

                                          ListView.builder(
                                        physics: BouncingScrollPhysics(),
                                        itemCount:
                                            productInstance.extraAddons.length,
                                        itemBuilder:
                                            (BuildContext context, int index) {
                                          final key = productInstance
                                              .extraAddons.keys
                                              .toList()[index];
                                          final addon =
                                              productInstance.extraAddons[key]!;

                                          return Container(
                                            height: 40 * HR,
                                            margin: EdgeInsets.only(
                                                bottom: 12 * HR),
                                            padding: EdgeInsets.all(0),
                                            child: Row(
                                              mainAxisAlignment:
                                                  MainAxisAlignment
                                                      .spaceBetween,
                                              children: <Widget>[
                                                Column(
                                                  crossAxisAlignment:
                                                      CrossAxisAlignment.start,
                                                  children: <Widget>[
                                                    Text(
                                                      addon.addonName,
                                                      textAlign: TextAlign.left,
                                                      style: TextStyle(
                                                        fontSize: 15 * HR,
                                                        fontWeight:
                                                            FontWeight.w600,
                                                        color: isDarkTheme
                                                            ? theme.primaryColor
                                                                .withOpacity(
                                                                    0.3)
                                                            : theme.primaryColor
                                                                .withOpacity(
                                                                    0.4),
                                                      ),
                                                    ),
                                                    Text(
                                                      "+\$${addon.addonPrice}",
                                                      textAlign: TextAlign.left,
                                                      style: TextStyle(
                                                        fontSize: 15 * HR,
                                                        fontWeight:
                                                            FontWeight.w400,
                                                        color: isDarkTheme
                                                            ? theme.primaryColor
                                                                .withOpacity(
                                                                    0.3)
                                                            : theme.primaryColor
                                                                .withOpacity(
                                                                    0.4),
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                Checkbox(
                                                  value: addon.isAdded,
                                                  activeColor: isDarkTheme
                                                      ? theme.primaryColor
                                                          .withOpacity(0.3)
                                                      : theme.primaryColor
                                                          .withOpacity(0.7),
                                                  checkColor: Colors.white,
                                                  onChanged: (value) {
                                                    // Update the isAdded state in the original dictionary
                                                    addon.isAdded = value!;

                                                    // Step 3: Call the function to update total addons price
                                                    if (value != null) {
                                                      double addonPrice = value
                                                          ? addon.addonPrice
                                                          : -addon.addonPrice;
                                                      updateTotalAddonsPrice(
                                                          addonPrice);
                                                      addon.isAdded = value;
                                                      productInstance
                                                          .extraAddons[key]
                                                          ?.isAdded = value;
                                                    }
                                                  },
                                                ),
                                              ],
                                            ),
                                          );
                                        },
                                      ),
                                    ),
                                    SizedBox(
                                      height: 12 * HR,
                                    ),
                                    Row(
                                      children: [
                                        CustomTextPassage(
                                          text: "Feedbacks",
                                          fontWeight: FontWeight.w600,
                                          alignment: TextAlign.left,
                                          fontSize: 20 * HR,
                                          fontColor: isDarkTheme
                                              ? theme.primaryColor
                                                  .withOpacity(0.3)
                                              : theme.primaryColor
                                                  .withOpacity(0.7),
                                        ),
                                      ],
                                    ),
                                    SizedBox(
                                      height: 12 * HR,
                                    ),
                                    CustomTextFormField(
                                      labelText: "Enter",
                                      controller: AdditionalComments,
                                      validationKey: '', // validation key
                                      errorMsg: "",
                                    ),
                                    SizedBox(
                                      height: 24 * HR,
                                    ),
                                    QuantitySelector(
                                      initialValue: selectedQuantity,
                                      text_color: Colors.black,
                                      color: isDarkTheme
                                          ? theme.primaryColor.withOpacity(0.3)
                                          : theme.primaryColor
                                              .withOpacity(0.15),
                                      onSelectedQuantityChanged:
                                          updateSelectedQuantity,
                                    ),
                                    SizedBox(
                                      height: 0 * HR,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            Column(
                              children: [
                                Container(
                                  child: MainBlueSubmitButton(
                                    text: tr("Add to bookings ", namedArgs: {
                                      'quantity': selectedQuantity.toString(),
                                      'price': totalAmount.toString()
                                    }),
                                    height: 56 * HR,
                                    onPressed: () {
                                      setState(() {
                                        _submitForm();
                                      });
                                    },
                                  ),
                                ),
                                SizedBox(
                                  height: 16 * HR,
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ));
  }
}
